{"version":3,"sources":["components/AppHeader.tsx","components/AppFooter.tsx","components/Todo.tsx","components/AppContent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppHeader","className","Navbar","bg","variant","Brand","AppFooter","Todo","props","InputGroup","FormControl","disabled","value","todo","text","isDone","Append","Button","onClick","e","callback","id","width","height","viewBox","fill","xmlns","fillRule","d","key","AppContent","useState","setText","data","setData","todoActionCallback","action","x","filter","it","map","Container","Jumbotron","Form","onSubmit","preventDefault","trim","length","Math","random","toString","type","placeholder","onChange","target","App","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc132d25.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/esm/Navbar';\n\nfunction AppHeader() {\n    return (\n        <header className=\"sticky-top\">\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand className=\"w-100 text-center\">To-Do App</Navbar.Brand>\n            </Navbar>\n        </header>\n    );\n}\n\nexport default AppHeader;","import React from 'react';\n\nfunction AppFooter() {\n    return (\n        <div className=\"my-2 text-muted text-center\">&copy; All rights reserved <strong>NutButterflY</strong> 2020</div>\n    );\n}\n\nexport default AppFooter;","import React from 'react'\nimport { ITodo } from './AppContent';\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\n\nexport interface TodoProps {\n\n    todo: ITodo,\n\n    callback: (id: string, action: string) => void\n\n}\n\nconst Todo: React.FC<TodoProps> = props => {\n    const handleStatus = (todo: ITodo) => {\n        if (todo.isDone) {\n            props.callback(todo.id, 'UNDONE');\n        } else {\n            props.callback(todo.id, 'DONE');\n        }\n    };\n\n    const handleDelete = (key: string) => {\n        props.callback(key, 'DELETE');\n    };\n    return (\n        <div className=\"my-1\">\n            <InputGroup>\n                <FormControl disabled={true} value={props.todo.text} className={props.todo.isDone ? 'todo---done' : 'todo---undone'} />\n                <InputGroup.Append>\n                    <Button variant={props.todo.isDone ? 'secondary' : 'primary'} onClick={e => handleStatus(props.todo)}>\n                        {\n                            props.todo.isDone ?\n                                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-x\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path fillRule=\"evenodd\" d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\n                                </svg>\n                                :\n                                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-check\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path fillRule=\"evenodd\" d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z\" />\n                                </svg>\n                        }\n                    </Button>\n                    <Button variant=\"danger\" onClick={e => handleDelete(props.todo.id)}>\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\n                            <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\n                        </svg>\n                    </Button>\n                </InputGroup.Append>\n            </InputGroup>\n        </div>\n    )\n}\n\nexport default Todo;","import React, { ChangeEvent, FormEvent, useState } from 'react'\n\nimport Container from 'react-bootstrap/esm/Container';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport Todo from './Todo';\n\nexport interface ITodo {\n\n    id: string,\n\n    text: string,\n\n    isDone: boolean\n\n};\n\nfunction AppContent() {\n\n    const [text, setText] = useState<string>('');\n\n    const [data, setData] = useState<ITodo[]>([]);\n\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (text.trim().length === 0) {\n            setText('');\n            return;\n        }\n\n        var x: ITodo = {\n            id: (Math.random() * 1000).toString(),\n            text: text.trim(),\n            isDone: false\n        };\n\n        setData([...data, x]);\n\n        setText('');\n    };\n\n    const handleTextChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setText(e.target.value);\n    };\n\n    const todoActionCallback = (id: string, action: string) => {\n        if (action === 'DONE' || action === 'UNDONE') {\n            var x = [...data];\n            x.filter(it => it.id === id)\n                .map((it) => it.isDone = !it.isDone);\n\n            setData(x);\n        } else if (action === 'DELETE') {\n            setData(data.filter(it => it.id !== id));\n        }\n    };\n\n    return (\n        <Container className=\"my-4\">\n            <Jumbotron>\n                <h1>Hello, React World!</h1>\n                <p>The POC project to learn how to build SPA with ReactJS</p>\n            </Jumbotron>\n\n            <Form onSubmit={handleSubmit}>\n                <InputGroup className=\"mb-3\">\n                    <FormControl type=\"text\" placeholder=\"What's to-do?\" value={text} onChange={handleTextChange} />\n                    <InputGroup.Append>\n                        <Button variant=\"primary\" type=\"submit\">\n                            <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-plus\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path fillRule=\"evenodd\" d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\n                            </svg>\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Form>\n\n            {\n                data.map((it) => (\n                    <Todo key={it.id} todo={it} callback={todoActionCallback} />\n                ))\n            }\n        </Container>\n    );\n}\n\nexport default AppContent;","import React from 'react';\nimport './App.css';\n\nimport AppHeader from './components/AppHeader';\nimport AppFooter from './components/AppFooter';\nimport AppContent from './components/AppContent';\n\nfunction App() {\n  return (\n    <div id=\"wrapper\">\n      <main role=\"main\" id=\"main\">\n        <AppHeader />\n        <AppContent />\n      </main>\n\n      <footer id=\"footer\">\n        <AppFooter />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// stylesheet\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}